#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ë–∞–Ω–Ω–µ—Ä
echo -e "${BLUE}====================================================${NC}"
echo -e "${BLUE}       –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ü–†–û–ï–ö–¢–ê             ${NC}"
echo -e "${BLUE}====================================================${NC}"
echo ""

# –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
declare -A CREDENTIALS

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    local DEPS=("git" "docker" "docker-compose" "curl" "psql" "openssl")
    local MISSING=()
    
    for dep in "${DEPS[@]}"; do
        echo -n "  - $dep: "
        if command -v $dep &> /dev/null; then
            echo -e "${GREEN}—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
            case $dep in
                "docker")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(docker --version | cut -d' ' -f3 | tr -d ',')"
                    ;;
                "docker-compose")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(docker-compose --version | cut -d' ' -f3 | tr -d ',')"
                    ;;
                "git")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(git --version | cut -d' ' -f3)"
                    ;;
                "psql")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(psql --version | cut -d' ' -f3)"
                    ;;
                "curl")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(curl --version | head -n1 | cut -d' ' -f2)"
                    ;;
            esac
        else
            echo -e "${RED}–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            MISSING+=("$dep")
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ sudo
    echo -n "  - sudo –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏: "
    if sudo -n true 2>/dev/null; then
        echo -e "${GREEN}–¥–æ—Å—Ç—É–ø–Ω—ã${NC}"
    else
        echo -e "${YELLOW}—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ Docker
    echo -n "  - Docker —Å–µ—Ä–≤–∏—Å: "
    if systemctl is-active --quiet docker 2>/dev/null; then
        echo -e "${GREEN}–∑–∞–ø—É—â–µ–Ω${NC}"
    else
        echo -e "${YELLOW}–Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
    fi
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ ${#MISSING[@]} -gt 0 ]; then
        echo -e "\n${YELLOW}‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:${NC}"
        for dep in "${MISSING[@]}"; do
            echo "   - $dep"
        done
        
        echo -e "\n${BLUE}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏? (y/n)${NC}"
        read INSTALL_DEPS
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä–µ—Ç–∫–∏
        INSTALL_DEPS=$(echo "$INSTALL_DEPS" | tr -d '\r')
        
        if [ "$INSTALL_DEPS" = "y" ] || [ "$INSTALL_DEPS" = "Y" ]; then
            echo -e "${BLUE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
            sudo apt-get update
            for dep in "${MISSING[@]}"; do
                case $dep in
                    "docker")
                        sudo apt-get install -y docker.io
                        sudo systemctl enable docker
                        sudo systemctl start docker
                        ;;
                    "docker-compose")
                        sudo apt-get install -y docker-compose
                        ;;
                    "psql")
                        sudo apt-get install -y postgresql-client
                        ;;
                    "git")
                        sudo apt-get install -y git
                        ;;
                    "curl")
                        sudo apt-get install -y curl
                        ;;
                    "openssl")
                        sudo apt-get install -y openssl
                        ;;
                esac
            done
            echo -e "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
        else
            echo -e "${RED}‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.${NC}"
            exit 1
        fi
    fi
}

# –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
select_source() {
    echo -e "\n${BLUE}üì• –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
    echo "1) Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    echo "2) –ê—Ä—Ö–∏–≤ (curl)"
    echo "3) –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
    
    read SOURCE_TYPE
    SOURCE_TYPE=$(echo "$SOURCE_TYPE" | tr -d '\r')
    
    case $SOURCE_TYPE in
        1)
            echo -e "\n${BLUE}–í–≤–µ–¥–∏—Ç–µ URL Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:${NC}"
            read REPO_URL
            REPO_URL=$(echo "$REPO_URL" | tr -d '\r')
            
            echo -e "\n${BLUE}–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main):${NC}"
            read BRANCH_NAME
            BRANCH_NAME=$(echo "$BRANCH_NAME" | tr -d '\r')
            BRANCH_NAME=${BRANCH_NAME:-main}
            
            CREDENTIALS["project_source"]="Git: $REPO_URL (–≤–µ—Ç–∫–∞: $BRANCH_NAME)"
            ;;
        2)
            echo -e "\n${BLUE}–í–≤–µ–¥–∏—Ç–µ URL –∞—Ä—Ö–∏–≤–∞:${NC}"
            read ARCHIVE_URL
            ARCHIVE_URL=$(echo "$ARCHIVE_URL" | tr -d '\r')
            CREDENTIALS["project_source"]="Archive: $ARCHIVE_URL"
            ;;
        3)
            echo -e "\n${BLUE}–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
            read PROJECT_DIR
            PROJECT_DIR=$(echo "$PROJECT_DIR" | tr -d '\r')
            CREDENTIALS["project_source"]="Local directory: $PROJECT_DIR"
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.${NC}"
            select_source
            ;;
    esac
}

# –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
collect_info() {
    echo -e "\n${BLUE}üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞${NC}"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    echo -e "\n${BLUE}–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
    read PROJECT_NAME
    PROJECT_NAME=$(echo "$PROJECT_NAME" | tr -d '\r')
    CREDENTIALS["project_name"]=$PROJECT_NAME
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    echo -e "\n${BLUE}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /opt/$PROJECT_NAME):${NC}"
    read INSTALL_DIR
    INSTALL_DIR=$(echo "$INSTALL_DIR" | tr -d '\r')
    INSTALL_DIR=${INSTALL_DIR:-/opt/$PROJECT_NAME}
    CREDENTIALS["install_dir"]=$INSTALL_DIR
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    echo -e "\n${BLUE}–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: postgres):${NC}"
    read DB_USER
    DB_USER=$(echo "$DB_USER" | tr -d '\r')
    DB_USER=${DB_USER:-postgres}
    CREDENTIALS["db_user"]=$DB_USER
    
    echo -e "\n${BLUE}–ü–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–ª—É—á–∞–π–Ω—ã–π):${NC}"
    read -s DB_PASSWORD
    DB_PASSWORD=$(echo "$DB_PASSWORD" | tr -d '\r')
    echo ""
    if [ -z "$DB_PASSWORD" ]; then
        DB_PASSWORD=$(openssl rand -base64 12)
    fi
    CREDENTIALS["db_password"]=$DB_PASSWORD
    
    echo -e "\n${BLUE}–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $PROJECT_NAME):${NC}"
    read DB_NAME
    DB_NAME=$(echo "$DB_NAME" | tr -d '\r')
    DB_NAME=${DB_NAME:-$PROJECT_NAME}
    CREDENTIALS["db_name"]=$DB_NAME
    
    # –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    echo -e "\n${BLUE}Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:${NC}"
    read ADMIN_EMAIL
    ADMIN_EMAIL=$(echo "$ADMIN_EMAIL" | tr -d '\r')
    CREDENTIALS["admin_email"]=$ADMIN_EMAIL
    
    echo -e "\n${BLUE}–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:${NC}"
    read -s ADMIN_PASSWORD
    ADMIN_PASSWORD=$(echo "$ADMIN_PASSWORD" | tr -d '\r')
    echo ""
    CREDENTIALS["admin_password"]=$ADMIN_PASSWORD
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    echo -e "\n${BLUE}–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):${NC}"
    read DOMAIN_NAME
    DOMAIN_NAME=$(echo "$DOMAIN_NAME" | tr -d '\r')
    CREDENTIALS["domain_name"]=${DOMAIN_NAME:-"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å"}
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
    echo -e "\n${BLUE}–ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç? (y/n):${NC}"
    read SETUP_SSL
    SETUP_SSL=$(echo "$SETUP_SSL" | tr -d '\r')
    CREDENTIALS["setup_ssl"]=${SETUP_SSL:-"n"}
    
    # JWT Secret –¥–ª—è API
    echo -e "\n${BLUE}JWT Secret (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–ª—É—á–∞–π–Ω—ã–π):${NC}"
    read -s JWT_SECRET
    JWT_SECRET=$(echo "$JWT_SECRET" | tr -d '\r')
    echo ""
    if [ -z "$JWT_SECRET" ]; then
        JWT_SECRET=$(openssl rand -base64 32)
    fi
    CREDENTIALS["jwt_secret"]=$JWT_SECRET
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
download_project() {
    echo -e "\n${BLUE}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    sudo mkdir -p "$INSTALL_DIR"
    sudo chown $(whoami): "$INSTALL_DIR"
    
    case $SOURCE_TYPE in
        1)
            # Git
            echo -e "${BLUE}–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"
            git clone -b "$BRANCH_NAME" "$REPO_URL" "$INSTALL_DIR/temp"
            mv "$INSTALL_DIR/temp"/* "$INSTALL_DIR/"
            mv "$INSTALL_DIR/temp"/.* "$INSTALL_DIR/" 2>/dev/null || true
            rm -rf "$INSTALL_DIR/temp"
            ;;
        2)
            # –ê—Ä—Ö–∏–≤
            echo -e "${BLUE}–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞...${NC}"
            ARCHIVE_NAME=$(basename "$ARCHIVE_URL")
            curl -L "$ARCHIVE_URL" -o "/tmp/$ARCHIVE_NAME"
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ä—Ö–∏–≤–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
            if [[ "$ARCHIVE_NAME" == *.zip ]]; then
                unzip "/tmp/$ARCHIVE_NAME" -d "$INSTALL_DIR/temp"
            elif [[ "$ARCHIVE_NAME" == *.tar.gz || "$ARCHIVE_NAME" == *.tgz ]]; then
                mkdir -p "$INSTALL_DIR/temp"
                tar -xzf "/tmp/$ARCHIVE_NAME" -C "$INSTALL_DIR/temp"
            elif [[ "$ARCHIVE_NAME" == *.tar ]]; then
                mkdir -p "$INSTALL_DIR/temp"
                tar -xf "/tmp/$ARCHIVE_NAME" -C "$INSTALL_DIR/temp"
            else
                echo -e "${RED}‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞.${NC}"
                exit 1
            fi
            
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            EXTRACTED_DIR=$(ls -d "$INSTALL_DIR/temp"/*/ 2>/dev/null | head -n1)
            if [ -n "$EXTRACTED_DIR" ]; then
                mv "$EXTRACTED_DIR"/* "$INSTALL_DIR/"
                mv "$EXTRACTED_DIR"/.* "$INSTALL_DIR/" 2>/dev/null || true
            else
                mv "$INSTALL_DIR/temp"/* "$INSTALL_DIR/"
                mv "$INSTALL_DIR/temp"/.* "$INSTALL_DIR/" 2>/dev/null || true
            fi
            rm -rf "$INSTALL_DIR/temp"
            rm "/tmp/$ARCHIVE_NAME"
            ;;
        3)
            # –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            echo -e "${BLUE}–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...${NC}"
            cp -r "$PROJECT_DIR"/* "$INSTALL_DIR/"
            cp -r "$PROJECT_DIR"/.[^.]* "$INSTALL_DIR/" 2>/dev/null || true
            ;;
    esac
    
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ $INSTALL_DIR${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
configure_project() {
    echo -e "\n${BLUE}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env –∏–ª–∏ .env.example
    ENV_FILE="$INSTALL_DIR/.env"
    ENV_EXAMPLE="$INSTALL_DIR/.env.example"
    
    if [ ! -f "$ENV_FILE" ] && [ -f "$ENV_EXAMPLE" ]; then
        cp "$ENV_EXAMPLE" "$ENV_FILE"
    elif [ ! -f "$ENV_FILE" ]; then
        touch "$ENV_FILE"
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    sed -i "s/DB_USER=.*/DB_USER=$DB_USER/" "$ENV_FILE" 2>/dev/null || \
        echo "DB_USER=$DB_USER" >> "$ENV_FILE"
    
    sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" "$ENV_FILE" 2>/dev/null || \
        echo "DB_PASSWORD=$DB_PASSWORD" >> "$ENV_FILE"
    
    sed -i "s/DB_NAME=.*/DB_NAME=$DB_NAME/" "$ENV_FILE" 2>/dev/null || \
        echo "DB_NAME=$DB_NAME" >> "$ENV_FILE"
    
    # JWT
    sed -i "s/JWT_SECRET=.*/JWT_SECRET=$JWT_SECRET/" "$ENV_FILE" 2>/dev/null || \
        echo "JWT_SECRET=$JWT_SECRET" >> "$ENV_FILE"
    
    # –î–æ–º–µ–Ω
    if [ -n "$DOMAIN_NAME" ]; then
        sed -i "s/APP_URL=.*/APP_URL=https:\/\/$DOMAIN_NAME/" "$ENV_FILE" 2>/dev/null || \
            echo "APP_URL=https://$DOMAIN_NAME" >> "$ENV_FILE"
    else
        # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        SERVER_IP=$(curl -s ifconfig.me)
        sed -i "s/APP_URL=.*/APP_URL=http:\/\/$SERVER_IP/" "$ENV_FILE" 2>/dev/null || \
            echo "APP_URL=http://$SERVER_IP" >> "$ENV_FILE"
    fi
    
    # Admin
    sed -i "s/ADMIN_EMAIL=.*/ADMIN_EMAIL=$ADMIN_EMAIL/" "$ENV_FILE" 2>/dev/null || \
        echo "ADMIN_EMAIL=$ADMIN_EMAIL" >> "$ENV_FILE"
    
    sed -i "s/ADMIN_PASSWORD=.*/ADMIN_PASSWORD=$ADMIN_PASSWORD/" "$ENV_FILE" 2>/dev/null || \
        echo "ADMIN_PASSWORD=$ADMIN_PASSWORD" >> "$ENV_FILE"
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞${NC}"
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
run_project() {
    echo -e "\n${BLUE}üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    
    cd "$INSTALL_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è docker-compose.yml
    if [ -f "docker-compose.yml" ]; then
        echo -e "${BLUE}–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
        sudo docker-compose pull
        sudo docker-compose up -d
    else
        echo -e "${YELLOW}‚ö†Ô∏è docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if [ -f "setup.sh" ]; then
            echo -e "${BLUE}–ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç setup.sh. –ó–∞–ø—É—Å–∫...${NC}"
            sudo chmod +x setup.sh
            sudo ./setup.sh
        elif [ -f "install.sh" ]; then
            echo -e "${BLUE}–ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç install.sh. –ó–∞–ø—É—Å–∫...${NC}"
            sudo chmod +x install.sh
            sudo ./install.sh
        else
            echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.${NC}"
        fi
    fi
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    echo -e "\n${BLUE}üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...${NC}"
    CREDENTIALS_FILE="$INSTALL_DIR/project_credentials.txt"
    
    echo "================================================" > "$CREDENTIALS_FILE"
    echo "            –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –ü–†–û–ï–ö–¢–ê              " >> "$CREDENTIALS_FILE"
    echo "================================================" >> "$CREDENTIALS_FILE"
    echo "–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $(date)" >> "$CREDENTIALS_FILE"
    echo "" >> "$CREDENTIALS_FILE"
    
    for key in "${!CREDENTIALS[@]}"; do
        echo "$key: ${CREDENTIALS[$key]}" >> "$CREDENTIALS_FILE"
    done
    
    chmod 600 "$CREDENTIALS_FILE"
    echo -e "${GREEN}‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $CREDENTIALS_FILE${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
setup_nginx() {
    if [ -n "$DOMAIN_NAME" ]; then
        echo -e "\n${BLUE}üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –¥–ª—è $DOMAIN_NAME...${NC}"
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if ! command -v nginx &> /dev/null; then
            echo -e "${BLUE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx...${NC}"
            sudo apt-get update
            sudo apt-get install -y nginx
        fi
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ Nginx
        NGINX_CONF="/etc/nginx/sites-available/$DOMAIN_NAME"
        
        sudo bash -c "cat > $NGINX_CONF << EOL
server {
    listen 80;
    server_name $DOMAIN_NAME;

    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host \\\$host;
        proxy_set_header X-Real-IP \\\$remote_addr;
        proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \\\$scheme;
    }
}
EOL"
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–π—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx
        sudo ln -sf "$NGINX_CONF" "/etc/nginx/sites-enabled/"
        sudo nginx -t && sudo systemctl restart nginx
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if [[ "$SETUP_SSL" == "y" || "$SETUP_SSL" == "Y" ]]; then
            echo -e "${BLUE}üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å Let's Encrypt...${NC}"
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Certbot –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if ! command -v certbot &> /dev/null; then
                sudo apt-get update
                sudo apt-get install -y certbot python3-certbot-nginx
            fi
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            sudo certbot --nginx -d "$DOMAIN_NAME"
        fi
        
        echo -e "${GREEN}‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è $DOMAIN_NAME${NC}"
    fi
}

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
show_results() {
    echo -e "\n${BLUE}====================================================${NC}"
    echo -e "${GREEN}‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê${NC}"
    echo -e "${BLUE}====================================================${NC}"
    
    echo -e "\n${YELLOW}üìù –°–û–•–†–ê–ù–ï–ù–ù–´–ï –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï:${NC}"
    echo -e "${BLUE}---------------------------------------------------${NC}"
    
    for key in "${!CREDENTIALS[@]}"; do
        # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
        if [[ "$key" == *"password"* || "$key" == *"secret"* ]]; then
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–æ
            value="${CREDENTIALS[$key]}"
            length=${#value}
            
            if [ "$length" -gt 5 ]; then
                masked_value="${value:0:2}$(printf '%*s' $((length-4)) | tr ' ' '*')${value: -2}"
            else
                masked_value="*****"
            fi
            
            echo -e "${GREEN}$key:${NC} $masked_value"
        else
            echo -e "${GREEN}$key:${NC} ${CREDENTIALS[$key]}"
        fi
    done
    
    echo -e "${BLUE}---------------------------------------------------${NC}"
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
    echo -e "\n${BLUE}üìä –î–û–°–¢–£–ü –ö –ü–†–û–ï–ö–¢–£:${NC}"
    
    if [ -n "$DOMAIN_NAME" ]; then
        if [[ "$SETUP_SSL" == "y" || "$SETUP_SSL" == "Y" ]]; then
            echo -e "${GREEN}URL:${NC} https://$DOMAIN_NAME"
        else
            echo -e "${GREEN}URL:${NC} http://$DOMAIN_NAME"
        fi
    else
        SERVER_IP=$(curl -s ifconfig.me)
        echo -e "${GREEN}URL:${NC} http://$SERVER_IP:8000"
    fi
    
    echo -e "${GREEN}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞:${NC} $INSTALL_DIR"
    echo -e "${GREEN}–§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:${NC} $CREDENTIALS_FILE"
    
    echo -e "\n${BLUE}====================================================${NC}"
    echo -e "${BLUE}            –ë–õ–ê–ì–û–î–ê–†–ò–ú –ó–ê –£–°–¢–ê–ù–û–í–ö–£!               ${NC}"
    echo -e "${BLUE}====================================================${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    select_source
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    collect_info
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    download_project
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    configure_project
    
    # –ó–∞–ø—É—Å–∫
    run_project
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
    setup_nginx
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    show_results
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main 
