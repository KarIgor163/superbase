#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Supabase –Ω–∞ VPS
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
CREDENTIALS_FILE="/root/.supabase_credentials"

# –ë–∞–Ω–Ω–µ—Ä
echo -e "${BLUE}====================================================${NC}"
echo -e "${BLUE}    –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï SUPABASE –ù–ê VPS    ${NC}"
echo -e "${BLUE}====================================================${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
log_error() {
    local ERROR_MSG="$1"
    local ERROR_FILE="baza_script.txt"
    local DATE=$(date "+%Y-%m-%d %H:%M:%S")
    
    echo -e "\n[${DATE}] [ERROR] - ${ERROR_MSG}" >> "$ERROR_FILE"
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: ${ERROR_MSG}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
safe_read() {
    local VAR_NAME=$1
    local DEFAULT_VALUE=$2
    local PROMPT=$3
    local HIDE_INPUT=$4
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤ —Å–∫–æ–±–∫–∞—Ö
    if [ -n "$DEFAULT_VALUE" ]; then
        echo -e "${BLUE}${PROMPT} (${DEFAULT_VALUE}):${NC}"
    else
        echo -e "${BLUE}${PROMPT}:${NC}"
    fi
    
    # –†–µ–∂–∏–º —Å–∫—Ä—ã—Ç–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–∞—Ä–æ–ª–µ–π
    if [ "$HIDE_INPUT" = "true" ]; then
        read -s USER_INPUT
        echo "" # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –≤–≤–æ–¥–∞
    else
        read USER_INPUT
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä–µ—Ç–∫–∏
    USER_INPUT=$(echo "$USER_INPUT" | tr -d '\r')
    
    # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [ -z "$USER_INPUT" ] && [ -n "$DEFAULT_VALUE" ]; then
        USER_INPUT="$DEFAULT_VALUE"
    fi
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —á–µ—Ä–µ–∑ eval
    eval "$VAR_NAME=\"$USER_INPUT\""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–∑ –æ–ø—Ü–∏–π
safe_select() {
    local VAR_NAME=$1
    local PROMPT=$2
    shift 2
    local OPTIONS=("$@")
    
    echo -e "${BLUE}${PROMPT}${NC}"
    
    # –í—ã–≤–æ–¥ –æ–ø—Ü–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
    for ((i=0; i<${#OPTIONS[@]}; i++)); do
        echo "$(($i+1))) ${OPTIONS[$i]}"
    done
    
    # –ß—Ç–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä–µ—Ç–∫–∏
    read USER_INPUT
    USER_INPUT=$(echo "$USER_INPUT" | tr -d '\r')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if [[ "$USER_INPUT" =~ ^[0-9]+$ ]] && [ "$USER_INPUT" -ge 1 ] && [ "$USER_INPUT" -le ${#OPTIONS[@]} ]; then
        # –í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å (—Å —É—á–µ—Ç–æ–º —á—Ç–æ –º–∞—Å—Å–∏–≤—ã —Å 0, –∞ –æ–ø—Ü–∏–∏ —Å 1)
        eval "$VAR_NAME=$((USER_INPUT-1))"
        return 0
    else
        echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        safe_select "$VAR_NAME" "$PROMPT" "${OPTIONS[@]}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞/–Ω–µ—Ç
safe_yes_no() {
    local VAR_NAME=$1
    local PROMPT=$2
    local DEFAULT=$3
    
    local DEFAULT_DISPLAY=""
    if [ "$DEFAULT" = "y" ]; then
        DEFAULT_DISPLAY=" [Y/n]"
    elif [ "$DEFAULT" = "n" ]; then
        DEFAULT_DISPLAY=" [y/N]"
    else
        DEFAULT_DISPLAY=" [y/n]"
    fi
    
    echo -e "${BLUE}${PROMPT}${DEFAULT_DISPLAY}:${NC}"
    read USER_INPUT
    USER_INPUT=$(echo "$USER_INPUT" | tr -d '\r')
    
    # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π –∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [ -z "$USER_INPUT" ] && [ -n "$DEFAULT" ]; then
        USER_INPUT="$DEFAULT"
    fi
    
    case "$USER_INPUT" in
        y|Y|yes|Yes|YES)
            eval "$VAR_NAME=true"
            ;;
        n|N|no|No|NO)
            eval "$VAR_NAME=false"
            ;;
        *)
            echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'.${NC}"
            safe_yes_no "$VAR_NAME" "$PROMPT" "$DEFAULT"
            ;;
    esac
}

# –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
declare -A CREDENTIALS

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    local DEPS=("git" "docker" "docker-compose" "curl" "openssl")
    local MISSING=()
    
    for dep in "${DEPS[@]}"; do
        echo -n "  - $dep: "
        if command -v $dep &> /dev/null; then
            echo -e "${GREEN}—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
            case $dep in
                "docker")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(docker --version | cut -d' ' -f3 | tr -d ',')"
                    ;;
                "docker-compose")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(docker-compose --version | cut -d' ' -f3 | tr -d ',')"
                    ;;
                "git")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(git --version | cut -d' ' -f3)"
                    ;;
                "curl")
                    echo -e "    –í–µ—Ä—Å–∏—è: $(curl --version | head -n1 | cut -d' ' -f2)"
                    ;;
            esac
        else
            echo -e "${RED}–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
            MISSING+=("$dep")
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ sudo
    echo -n "  - sudo –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏: "
    if sudo -n true 2>/dev/null; then
        echo -e "${GREEN}–¥–æ—Å—Ç—É–ø–Ω—ã${NC}"
    else
        echo -e "${YELLOW}—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ Docker
    echo -n "  - Docker —Å–µ—Ä–≤–∏—Å: "
    if systemctl is-active --quiet docker 2>/dev/null; then
        echo -e "${GREEN}–∑–∞–ø—É—â–µ–Ω${NC}"
    else
        echo -e "${YELLOW}–Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
    fi
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ ${#MISSING[@]} -gt 0 ]; then
        echo -e "\n${YELLOW}‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:${NC}"
        for dep in "${MISSING[@]}"; do
            echo "   - $dep"
        done
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
        safe_yes_no "INSTALL_DEPS" "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏?" "y"
        
        if [ "$INSTALL_DEPS" = "true" ]; then
            echo -e "${BLUE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
            sudo apt-get update
            for dep in "${MISSING[@]}"; do
                case $dep in
                    "docker")
                        sudo apt-get install -y docker.io
                        sudo systemctl enable docker
                        sudo systemctl start docker
                        ;;
                    "docker-compose")
                        sudo apt-get install -y docker-compose
                        ;;
                    "git")
                        sudo apt-get install -y git
                        ;;
                    "curl")
                        sudo apt-get install -y curl
                        ;;
                    "openssl")
                        sudo apt-get install -y openssl
                        ;;
                esac
            done
            echo -e "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
        else
            echo -e "${RED}‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.${NC}"
            log_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
            exit 1
        fi
    fi
}

# –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
select_source() {
    echo -e "\n${BLUE}üì• –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ Supabase:${NC}"
    
    local OPTIONS=("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" "–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è" "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    safe_select "SOURCE_TYPE" "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ Supabase:" "${OPTIONS[@]}"
    
    case $SOURCE_TYPE in
        0) # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            REPO_URL="https://github.com/supabase/supabase.git"
            safe_read "BRANCH_NAME" "master" "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏"
            CREDENTIALS["project_source"]="Git: $REPO_URL (–≤–µ—Ç–∫–∞: $BRANCH_NAME)"
            ;;
        1) # –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            safe_read "PROJECT_DIR" "" "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
            CREDENTIALS["project_source"]="Local directory: $PROJECT_DIR"
            ;;
        2) # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            safe_read "REPO_URL" "" "–í–≤–µ–¥–∏—Ç–µ URL —Å–≤–æ–µ–≥–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            safe_read "BRANCH_NAME" "main" "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏"
            CREDENTIALS["project_source"]="Custom Git: $REPO_URL (–≤–µ—Ç–∫–∞: $BRANCH_NAME)"
            ;;
    esac
}

# –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Supabase
collect_info() {
    echo -e "\n${BLUE}üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase${NC}"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    safe_read "PROJECT_NAME" "supabase" "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
    CREDENTIALS["project_name"]=$PROJECT_NAME
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    safe_read "INSTALL_DIR" "/opt/$PROJECT_NAME" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    CREDENTIALS["install_dir"]=$INSTALL_DIR
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    safe_read "DB_USER" "postgres" "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    CREDENTIALS["db_user"]=$DB_USER
    
    safe_read "DB_PASSWORD" "" "–ü–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ)" "true"
    if [ -z "$DB_PASSWORD" ]; then
        DB_PASSWORD=$(openssl rand -base64 12)
        echo -e "${YELLOW}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å: $DB_PASSWORD${NC}"
    fi
    CREDENTIALS["db_password"]=$DB_PASSWORD
    
    safe_read "DB_PORT" "5432" "–ü–æ—Ä—Ç PostgreSQL"
    CREDENTIALS["db_port"]=$DB_PORT
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    safe_read "ADMIN_EMAIL" "admin@example.com" "Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    CREDENTIALS["admin_email"]=$ADMIN_EMAIL
    
    safe_read "ADMIN_PASSWORD" "" "–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ)" "true"
    if [ -z "$ADMIN_PASSWORD" ]; then
        ADMIN_PASSWORD=$(openssl rand -base64 12)
        echo -e "${YELLOW}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å: $ADMIN_PASSWORD${NC}"
    fi
    CREDENTIALS["admin_password"]=$ADMIN_PASSWORD
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    safe_read "DOMAIN_NAME" "" "–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è IP)"
    CREDENTIALS["domain_name"]=${DOMAIN_NAME:-"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å"}
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
    if [ -n "$DOMAIN_NAME" ]; then
        safe_yes_no "SETUP_SSL" "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —á–µ—Ä–µ–∑ Let's Encrypt?" "y"
        CREDENTIALS["setup_ssl"]=$SETUP_SSL
    else
        SETUP_SSL=false
        CREDENTIALS["setup_ssl"]=$SETUP_SSL
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞
    JWT_SECRET=$(openssl rand -base64 32)
    CREDENTIALS["jwt_secret"]=$JWT_SECRET
    
    # –ü–æ—Ä—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
    safe_read "STUDIO_PORT" "3000" "–ü–æ—Ä—Ç –¥–ª—è Supabase Studio"
    CREDENTIALS["studio_port"]=$STUDIO_PORT
    
    safe_read "REST_PORT" "8000" "–ü–æ—Ä—Ç –¥–ª—è REST API"
    CREDENTIALS["rest_port"]=$REST_PORT
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase
download_supabase() {
    echo -e "\n${BLUE}üì• –ó–∞–≥—Ä—É–∑–∫–∞ Supabase...${NC}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    sudo mkdir -p "$INSTALL_DIR"
    sudo chown $(whoami): "$INSTALL_DIR"
    
    case $SOURCE_TYPE in
        0|2) # Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π)
            echo -e "${BLUE}–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"
            git clone -b "$BRANCH_NAME" "$REPO_URL" "$INSTALL_DIR/temp" || {
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π $REPO_URL –≤–µ—Ç–∫–∞ $BRANCH_NAME"
                exit 1
            }
            
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ examples/docker
            if [ -d "$INSTALL_DIR/temp/examples/docker" ]; then
                cp -r "$INSTALL_DIR/temp/examples/docker"/* "$INSTALL_DIR/"
                echo -e "${GREEN}–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã –∏–∑ examples/docker${NC}"
            else
                # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                mv "$INSTALL_DIR/temp"/* "$INSTALL_DIR/" 2>/dev/null || true
                mv "$INSTALL_DIR/temp"/.* "$INSTALL_DIR/" 2>/dev/null || true
                echo -e "${YELLOW}–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —Ñ–∞–π–ª—ã${NC}"
            fi
            
            rm -rf "$INSTALL_DIR/temp"
            ;;
        1) # –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            echo -e "${BLUE}–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...${NC}"
            cp -r "$PROJECT_DIR"/* "$INSTALL_DIR/" || {
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ $PROJECT_DIR"
                exit 1
            }
            cp -r "$PROJECT_DIR"/.[^.]* "$INSTALL_DIR/" 2>/dev/null || true
            ;;
    esac
    
    echo -e "${GREEN}‚úÖ Supabase –∑–∞–≥—Ä—É–∂–µ–Ω –≤ $INSTALL_DIR${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase
configure_supabase() {
    echo -e "\n${BLUE}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase...${NC}"
    
    cd "$INSTALL_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è docker-compose.yml
    if [ ! -f "docker-compose.yml" ]; then
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $INSTALL_DIR"
        echo -e "${RED}–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫.${NC}"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    echo -e "${BLUE}–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...${NC}"
    cat > .env << EOL
# Supabase configuration
POSTGRES_PASSWORD=${DB_PASSWORD}
POSTGRES_DB=postgres
POSTGRES_USER=${DB_USER}
POSTGRES_PORT=${DB_PORT}

# JWT
SUPABASE_JWT_SECRET=${JWT_SECRET}

# API and Studio ports
STUDIO_PORT=${STUDIO_PORT}
API_PORT=${REST_PORT}

# Email for Let's Encrypt
ADMIN_EMAIL=${ADMIN_EMAIL}

# Domain settings
EOL

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ–º–µ–Ω–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if [ -n "$DOMAIN_NAME" ]; then
        echo "DOMAIN=${DOMAIN_NAME}" >> .env
    else
        # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        SERVER_IP=$(curl -s ifconfig.me)
        echo "# IP address instead of domain" >> .env
        echo "SERVER_IP=${SERVER_IP}" >> .env
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è Kong –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if [ -f "volumes/api/kong.yml" ]; then
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JWT —Å–µ–∫—Ä–µ—Ç–∞
        sed -i "s/jwt_secret:.*/jwt_secret: ${JWT_SECRET}/" volumes/api/kong.yml
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if [ "$SETUP_SSL" = "true" ] && [ -n "$DOMAIN_NAME" ]; then
        echo -e "${BLUE}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è –¥–æ–º–µ–Ω–∞ $DOMAIN_NAME...${NC}"
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è Certbot
        mkdir -p "volumes/certbot/conf"
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è docker-compose –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SSL
        if ! grep -q "certbot" docker-compose.yml; then
            echo -e "${BLUE}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Certbot –≤ docker-compose.yml...${NC}"
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å Certbot –≤ docker-compose.yml
            # –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π docker-compose.ssl.yml
        fi
    fi
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞${NC}"
}

# –ó–∞–ø—É—Å–∫ Supabase
start_supabase() {
    echo -e "\n${BLUE}üöÄ –ó–∞–ø—É—Å–∫ Supabase...${NC}"
    
    cd "$INSTALL_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è docker-compose.yml
    if [ -f "docker-compose.yml" ]; then
        echo -e "${BLUE}–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
        sudo docker-compose pull
        sudo docker-compose up -d || {
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Docker"
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.${NC}"
            echo -e "${YELLOW}–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: sudo docker-compose logs${NC}"
            exit 1
        }
        
        echo -e "${GREEN}‚úÖ Supabase —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!${NC}"
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
        echo -e "\n${BLUE}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ:${NC}"
        echo -e "${GREEN}Studio URL:${NC} http://localhost:${STUDIO_PORT}"
        echo -e "${GREEN}REST API:${NC} http://localhost:${REST_PORT}/rest/v1/"
        
        if [ -n "$DOMAIN_NAME" ]; then
            echo -e "${GREEN}–ü—É–±–ª–∏—á–Ω—ã–π URL:${NC} http://${DOMAIN_NAME}"
            if [ "$SETUP_SSL" = "true" ]; then
                echo -e "${GREEN}–ó–∞—â–∏—â–µ–Ω–Ω—ã–π URL:${NC} https://${DOMAIN_NAME}"
            fi
        else
            SERVER_IP=$(curl -s ifconfig.me)
            echo -e "${GREEN}–ü—É–±–ª–∏—á–Ω—ã–π URL:${NC} http://${SERVER_IP}"
        fi
    else
        log_error "–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo -e "${RED}‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.${NC}"
        exit 1
    fi
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
save_credentials() {
    echo -e "\n${BLUE}üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...${NC}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    cat > "$INSTALL_DIR/credentials.txt" << EOL
# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Supabase
# –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $(date "+%Y-%m-%d %H:%M:%S")
#
# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!
# –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ –∏ –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø.

[–ü—Ä–æ–µ–∫—Ç]
–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${CREDENTIALS["project_name"]}
–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${CREDENTIALS["install_dir"]}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${CREDENTIALS["project_source"]}

[–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö]
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${CREDENTIALS["db_user"]}
–ü–∞—Ä–æ–ª—å: ${CREDENTIALS["db_password"]}
–ü–æ—Ä—Ç: ${CREDENTIALS["db_port"]}

[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]
Email: ${CREDENTIALS["admin_email"]}
–ü–∞—Ä–æ–ª—å: ${CREDENTIALS["admin_password"]}

[–î–æ—Å—Ç—É–ø]
Studio URL: http://localhost:${CREDENTIALS["studio_port"]}
REST API: http://localhost:${CREDENTIALS["rest_port"]}/rest/v1/
EOL

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if [ -n "$DOMAIN_NAME" ]; then
        echo "–î–æ–º–µ–Ω: ${CREDENTIALS["domain_name"]}" >> "$INSTALL_DIR/credentials.txt"
        if [ "$SETUP_SSL" = "true" ]; then
            echo "SSL: –ù–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ Let's Encrypt" >> "$INSTALL_DIR/credentials.txt"
        else
            echo "SSL: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" >> "$INSTALL_DIR/credentials.txt"
        fi
    else
        SERVER_IP=$(curl -s ifconfig.me)
        echo "IP –∞–¥—Ä–µ—Å: ${SERVER_IP}" >> "$INSTALL_DIR/credentials.txt"
    fi
    
    # –ó–∞—â–∏—Ç–∞ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    chmod 600 "$INSTALL_DIR/credentials.txt"
    
    echo -e "${GREEN}‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $INSTALL_DIR/credentials.txt${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø!${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
setup_nginx() {
    echo -e "\n${BLUE}üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx...${NC}"
    
    safe_yes_no "SETUP_NGINX" "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Nginx –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è Supabase?" "y"
    
    if [ "$SETUP_NGINX" = "true" ]; then
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if ! command -v nginx &> /dev/null; then
            echo -e "${BLUE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx...${NC}"
            sudo apt-get update
            sudo apt-get install -y nginx
        fi
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
        echo -e "${BLUE}–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx...${NC}"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞
        local SERVER_NAME="${DOMAIN_NAME:-$(curl -s ifconfig.me)}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        sudo tee /etc/nginx/sites-available/supabase.conf > /dev/null << EOL
server {
    listen 80;
    server_name ${SERVER_NAME};

    location / {
        proxy_pass http://localhost:${STUDIO_PORT};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /rest/ {
        proxy_pass http://localhost:${REST_PORT};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOL
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        sudo ln -sf /etc/nginx/sites-available/supabase.conf /etc/nginx/sites-enabled/
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx
        echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx...${NC}"
        sudo nginx -t
        
        if [ $? -eq 0 ]; then
            echo -e "${BLUE}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx...${NC}"
            sudo systemctl restart nginx
            echo -e "${GREEN}‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω${NC}"
        else
            log_error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.${NC}"
        fi
    else
        echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –ø—Ä–æ–ø—É—â–µ–Ω–∞.${NC}"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSL —Å Let's Encrypt (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
setup_ssl() {
    if [ "$SETUP_SSL" = "true" ] && [ -n "$DOMAIN_NAME" ]; then
        echo -e "\n${BLUE}üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å Let's Encrypt...${NC}"
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ certbot –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if ! command -v certbot &> /dev/null; then
            echo -e "${BLUE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Certbot...${NC}"
            sudo apt-get update
            sudo apt-get install -y certbot python3-certbot-nginx
        fi
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        echo -e "${BLUE}–ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞ ${DOMAIN_NAME}...${NC}"
        sudo certbot --nginx -d ${DOMAIN_NAME} --non-interactive --agree-tos -m ${ADMIN_EMAIL}
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞ ${DOMAIN_NAME}"
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞ –∏ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.${NC}"
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    select_source
    
    # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    collect_info
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ Supabase
    download_supabase
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    configure_supabase
    
    # –ó–∞–ø—É—Å–∫
    start_supabase
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
    setup_nginx
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
    setup_ssl
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    save_credentials
    
    echo -e "\n${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Supabase –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo -e "${BLUE}–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${INSTALL_DIR}/credentials.txt${NC}"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main 
