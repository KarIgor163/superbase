#!/bin/bash

# –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç-—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Supabase —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è sudo –ø—Ä–∞–≤
if [ "$(id -u)" != "0" ]; then
   echo -e "${RED}–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sudo.${NC}"
   exit 1
fi

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–∞
SCRIPTS_DIR="/opt/supabase-scripts"
SUPABASE_DIR="/opt/supabase"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Supabase
check_supabase_installed() {
    if [ -d "$SUPABASE_DIR" ] && [ -f "$SUPABASE_DIR/.env" ]; then
        return 0 # —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    else
        return 1 # –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    fi
}

# –î–µ–π—Å—Ç–≤–∏–µ: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Supabase
install_supabase() {
    echo -e "${BLUE}üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Supabase...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ Supabase
    if check_supabase_installed; then
        echo -e "${YELLOW}‚ö†Ô∏è Supabase —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $SUPABASE_DIR${NC}"
        read -p "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " REINSTALL
        if [ "$REINSTALL" != "y" ] && [ "$REINSTALL" != "Y" ]; then
            echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
            return
        fi
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...${NC}"
    apt-get update
    apt-get install -y git docker.io docker-compose curl openssl ufw
    
    # –ó–∞–ø—É—Å–∫ Docker
    echo -e "${BLUE}üê≥ –ó–∞–ø—É—Å–∫ Docker...${NC}"
    systemctl enable docker
    systemctl start docker
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    echo -e "${BLUE}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    mkdir -p $SUPABASE_DIR
    cd $SUPABASE_DIR
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Supabase
    echo -e "${BLUE}üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Supabase...${NC}"
    git clone --depth 1 https://github.com/supabase/supabase.git temp
    cp -r temp/docker/* .
    cp temp/docker/.env.example .env
    rm -rf temp
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
    echo -e "${BLUE}üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞ –∏ –∫–ª—é—á–µ–π...${NC}"
    JWT_SECRET=$(openssl rand -base64 32)
    ANON_KEY=$(openssl rand -base64 32)
    SERVICE_ROLE_KEY=$(openssl rand -base64 32)
    POSTGRES_PASSWORD=$(openssl rand -base64 16)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    SERVER_IP=$(curl -s ifconfig.me)
    SITE_URL="http://$SERVER_IP"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    echo -e "${BLUE}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    sed -i "s/POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=$POSTGRES_PASSWORD/" .env
    sed -i "s/JWT_SECRET=.*/JWT_SECRET=$JWT_SECRET/" .env
    sed -i "s/ANON_KEY=.*/ANON_KEY=$ANON_KEY/" .env
    sed -i "s/SERVICE_ROLE_KEY=.*/SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY/" .env
    sed -i "s|SITE_URL=.*|SITE_URL=$SITE_URL|" .env
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞ (UFW)
    echo -e "${BLUE}üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞...${NC}"
    ufw allow 22/tcp
    ufw allow 8000/tcp    # Supabase Studio
    ufw allow 5432/tcp    # PostgreSQL
    ufw allow 3000/tcp    # API
    ufw allow 4000/tcp    # Realtime
    ufw allow 80,443/tcp  # HTTP/HTTPS
    ufw --force enable
    ufw reload
    
    # –ó–∞–ø—É—Å–∫ Supabase
    echo -e "${BLUE}üèÅ –ó–∞–ø—É—Å–∫ Supabase...${NC}"
    docker-compose pull
    docker-compose up -d
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker-compose ps
    
    echo -e "
${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Supabase —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}
${GREEN}üìä –î–æ—Å—Ç—É–ø –∫ Supabase Studio: http://$SERVER_IP:8000${NC}

${YELLOW}–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:${NC}
üìù POSTGRES_PASSWORD: $POSTGRES_PASSWORD
üìù JWT_SECRET: $JWT_SECRET
üìù ANON_KEY: $ANON_KEY
üìù SERVICE_ROLE_KEY: $SERVICE_ROLE_KEY
"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    cat > $SUPABASE_DIR/supabase_credentials.txt << EOL
SUPABASE CREDENTIALS
====================
POSTGRES_PASSWORD: $POSTGRES_PASSWORD
JWT_SECRET: $JWT_SECRET
ANON_KEY: $ANON_KEY
SERVICE_ROLE_KEY: $SERVICE_ROLE_KEY
SITE_URL: $SITE_URL
====================
–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $(date)
EOL
    
    chmod 600 $SUPABASE_DIR/supabase_credentials.txt
    echo -e "${GREEN}üìÑ –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $SUPABASE_DIR/supabase_credentials.txt${NC}"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
setup_nginx() {
    echo -e "${BLUE}üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –¥–ª—è Supabase...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Supabase
    if ! check_supabase_installed; then
        echo -e "${RED}‚ùå Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Supabase.${NC}"
        return
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx...${NC}"
    apt-get update
    apt-get install -y nginx certbot python3-certbot-nginx
    
    # –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–∞
    read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è Supabase (–Ω–∞–ø—Ä–∏–º–µ—Ä, supabase.example.com): " DOMAIN
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ Nginx
    echo -e "${BLUE}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx...${NC}"
    CONFIG_PATH="/etc/nginx/sites-available/supabase"
    
    cat > $CONFIG_PATH << EOL
server {
    listen 80;
    server_name $DOMAIN;

    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase Studio
    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ REST API
    location /rest/ {
        proxy_pass http://localhost:3000/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ Realtime API
    location /realtime/ {
        proxy_pass http://localhost:4000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
    }
}
EOL
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
    ln -sf $CONFIG_PATH /etc/nginx/sites-enabled/
    nginx -t && systemctl restart nginx
    
    echo -e "${GREEN}‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Supabase.${NC}"
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É SSL
    read -p "–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å Let's Encrypt? (y/n): " SETUP_SSL
    
    if [ "$SETUP_SSL" = "y" ] || [ "$SETUP_SSL" = "Y" ]; then
        echo -e "${BLUE}üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å Let's Encrypt...${NC}"
        certbot --nginx -d $DOMAIN
        
        echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"
        echo -e "${YELLOW}üîÑ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å SITE_URL –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase (.env) –Ω–∞ https://$DOMAIN${NC}"
        echo "   –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker-compose -f $SUPABASE_DIR/docker-compose.yml restart"
    fi
    
    echo -e "${GREEN}üìä Supabase —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$DOMAIN${NC}"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
backup_supabase() {
    echo -e "${BLUE}üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ Supabase...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Supabase
    if ! check_supabase_installed; then
        echo -e "${RED}‚ùå Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Supabase.${NC}"
        return
    fi
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤
    BACKUP_DIR="$SUPABASE_DIR/backups"
    mkdir -p $BACKUP_DIR
    
    # –ò–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    BACKUP_FILE="$BACKUP_DIR/supabase_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL
    POSTGRES_CONTAINER=$(docker ps | grep postgres | awk '{print $1}')
    
    if [ -z "$POSTGRES_CONTAINER" ]; then
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –∑–∞–ø—É—â–µ–Ω.${NC}"
        return
    fi
    
    echo -e "${BLUE}üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
    docker exec -t $POSTGRES_CONTAINER pg_dumpall -c -U postgres > $BACKUP_FILE
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_FILE${NC}"
        
        # –°–∂–∞—Ç–∏–µ –±—ç–∫–∞–ø–∞
        gzip $BACKUP_FILE
        COMPRESSED_FILE="$BACKUP_FILE.gz"
        echo -e "${GREEN}üì¶ –§–∞–π–ª –±—ç–∫–∞–ø–∞ —Å–∂–∞—Ç: $COMPRESSED_FILE${NC}"
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        echo -e "${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...${NC}"
        ls -t $BACKUP_DIR/*.gz | tail -n +6 | xargs -r rm
        
        # –í—ã–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –±—ç–∫–∞–ø–∞
        BACKUP_SIZE=$(du -h $COMPRESSED_FILE | cut -f1)
        echo -e "${GREEN}üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $BACKUP_SIZE${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.${NC}"
        return
    fi
    
    echo "
${GREEN}–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:${NC}
$ gunzip $COMPRESSED_FILE
$ cat $BACKUP_FILE | docker exec -i \$POSTGRES_CONTAINER psql -U postgres
"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
restore_supabase() {
    echo -e "${BLUE}üöÄ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Supabase
    if ! check_supabase_installed; then
        echo -e "${RED}‚ùå Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Supabase.${NC}"
        return
    fi
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏
    BACKUP_DIR="$SUPABASE_DIR/backups"
    
    if [ ! -d "$BACKUP_DIR" ]; then
        echo -e "${RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $BACKUP_DIR${NC}"
        return
    fi
    
    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
    echo -e "${BLUE}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:${NC}"
    ls -lht $BACKUP_DIR/*.gz 2>/dev/null || echo -e "${YELLOW}–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.${NC}"
    
    # –ó–∞–ø—Ä–æ—Å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞ (*.gz): " BACKUP_FILE
    
    if [ ! -f "$BACKUP_FILE" ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $BACKUP_FILE${NC}"
        return
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL
    POSTGRES_CONTAINER=$(docker ps | grep postgres | awk '{print $1}')
    
    if [ -z "$POSTGRES_CONTAINER" ]; then
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –∑–∞–ø—É—â–µ–Ω.${NC}"
        return
    fi
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    echo -e "${RED}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!${NC}"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " CONFIRM
    
    if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
        echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        return
    fi
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –±—ç–∫–∞–ø–∞ –µ—Å–ª–∏ —ç—Ç–æ gzip —Ñ–∞–π–ª
    UNCOMPRESSED_FILE="${BACKUP_FILE%.gz}"
    if [[ $BACKUP_FILE == *.gz ]]; then
        echo -e "${BLUE}üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –±—ç–∫–∞–ø–∞...${NC}"
        gunzip -c "$BACKUP_FILE" > "$UNCOMPRESSED_FILE"
    else
        UNCOMPRESSED_FILE="$BACKUP_FILE"
    fi
    
    echo -e "${BLUE}üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)${NC}"
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cat "$UNCOMPRESSED_FILE" | docker exec -i $POSTGRES_CONTAINER psql -U postgres
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
    if [[ $BACKUP_FILE == *.gz ]]; then
        rm -f "$UNCOMPRESSED_FILE"
    fi
    
    echo -e "${GREEN}‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!${NC}"
    echo -e "${YELLOW}üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Supabase:${NC}"
    echo "docker-compose -f $SUPABASE_DIR/docker-compose.yml restart"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞
setup_auto_backup() {
    echo -e "${BLUE}üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Supabase...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Supabase
    if ! check_supabase_installed; then
        echo -e "${RED}‚ùå Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Supabase.${NC}"
        return
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–≤
    mkdir -p $SCRIPTS_DIR
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –±—ç–∫–∞–ø–∞
    BACKUP_SCRIPT="$SCRIPTS_DIR/backup_supabase.sh"
    
    cat > $BACKUP_SCRIPT << 'EOL'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
set -e

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤
BACKUP_DIR="/opt/supabase/backups"
mkdir -p $BACKUP_DIR

# –ò–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
BACKUP_FILE="$BACKUP_DIR/supabase_backup_$(date +%Y%m%d_%H%M%S).sql"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL
POSTGRES_CONTAINER=$(docker ps | grep postgres | awk '{print $1}')

if [ -z "$POSTGRES_CONTAINER" ]; then
    echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –∑–∞–ø—É—â–µ–Ω."
    exit 1
fi

echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker exec -t $POSTGRES_CONTAINER pg_dumpall -c -U postgres > $BACKUP_FILE

if [ $? -eq 0 ]; then
    echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_FILE"
    
    # –°–∂–∞—Ç–∏–µ –±—ç–∫–∞–ø–∞
    gzip $BACKUP_FILE
    COMPRESSED_FILE="$BACKUP_FILE.gz"
    echo "üì¶ –§–∞–π–ª –±—ç–∫–∞–ø–∞ —Å–∂–∞—Ç: $COMPRESSED_FILE"
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
    ls -t $BACKUP_DIR/*.gz | tail -n +6 | xargs -r rm
    
    # –í—ã–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –±—ç–∫–∞–ø–∞
    BACKUP_SIZE=$(du -h $COMPRESSED_FILE | cut -f1)
    echo "üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $BACKUP_SIZE"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."
    exit 1
fi
EOL
    
    chmod +x $BACKUP_SCRIPT
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
    LOG_DIR="/var/log/supabase"
    mkdir -p $LOG_DIR
    
    # –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤
    echo -e "${BLUE}üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:${NC}"
    echo "1) –ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
    echo "2) –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
    echo "3) –ï–∂–µ–º–µ—Å—è—á–Ω–æ"
    
    read -p "–í–∞—à –≤—ã–±–æ—Ä (1-3): " BACKUP_FREQUENCY
    
    case $BACKUP_FREQUENCY in
        1)
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø –≤ 2:00
            CRON_SCHEDULE="0 2 * * *"
            FREQUENCY_DESC="–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00"
            ;;
        2)
            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00
            CRON_SCHEDULE="0 3 * * 0"
            FREQUENCY_DESC="–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00)"
            ;;
        3)
            # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –±—ç–∫–∞–ø –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 4:00
            CRON_SCHEDULE="0 4 1 * *"
            FREQUENCY_DESC="–µ–∂–µ–º–µ—Å—è—á–Ω–æ (1-–µ —á–∏—Å–ª–æ –≤ 4:00)"
            ;;
        *)
            echo -e "${YELLOW}‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.${NC}"
            CRON_SCHEDULE="0 2 * * *"
            FREQUENCY_DESC="–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00"
            ;;
    esac
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ (—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    cat > /etc/logrotate.d/supabase << EOL
$LOG_DIR/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 0640 root root
}
EOL
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ cron
    CRON_JOB="$CRON_SCHEDULE $BACKUP_SCRIPT > $LOG_DIR/backup_\$(date +\%Y\%m\%d).log 2>&1"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–∫–æ–≥–æ –∂–µ –∑–∞–¥–∞–Ω–∏—è –≤ crontab
    EXISTING_JOB=$(crontab -l 2>/dev/null | grep -F "$BACKUP_SCRIPT")
    
    if [ -n "$EXISTING_JOB" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è. –û–±–Ω–æ–≤–ª—è–µ–º...${NC}"
        (crontab -l 2>/dev/null | grep -v "$BACKUP_SCRIPT" ; echo "$CRON_JOB") | crontab -
    else
        (crontab -l 2>/dev/null ; echo "$CRON_JOB") | crontab -
    fi
    
    echo -e "${GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo -e "${GREEN}üìÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è $FREQUENCY_DESC${NC}"
    echo -e "${GREEN}üìÅ –ë—ç–∫–∞–ø—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤: /opt/supabase/backups${NC}"
    echo -e "${GREEN}üìù –õ–æ–≥–∏ –±—ç–∫–∞–ø–æ–≤: $LOG_DIR${NC}"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase
update_supabase() {
    echo -e "${BLUE}üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Supabase...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Supabase
    if ! check_supabase_installed; then
        echo -e "${RED}‚ùå Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Supabase.${NC}"
        return
    fi
    
    cd $SUPABASE_DIR
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cp .env .env.backup
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo -e "${BLUE}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker-compose pull
    docker-compose up -d
    
    echo -e "${GREEN}‚úÖ Supabase —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!${NC}"
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker-compose ps
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_menu() {
    clear
    echo -e "${BLUE}============================================${NC}"
    echo -e "${BLUE}          –£–°–¢–ê–ù–û–í–©–ò–ö SUPABASE              ${NC}"
    echo -e "${BLUE}============================================${NC}"
    echo -e ""
    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo -e ""
    echo -e "${GREEN}1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Supabase${NC}"
    echo -e "${GREEN}2) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Nginx –∫–∞–∫ –æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏${NC}"
    echo -e "${GREEN}3) –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é${NC}"
    echo -e "${GREEN}4) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏${NC}"
    echo -e "${GREEN}5) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ${NC}"
    echo -e "${GREEN}6) –û–±–Ω–æ–≤–∏—Ç—å Supabase${NC}"
    echo -e "${GREEN}7) –í—ã—Ö–æ–¥${NC}"
    echo -e ""
    read -p "–í–∞—à –≤—ã–±–æ—Ä (1-7): " MENU_OPTION
    
    case $MENU_OPTION in
        1) install_supabase ;;
        2) setup_nginx ;;
        3) backup_supabase ;;
        4) restore_supabase ;;
        5) setup_auto_backup ;;
        6) update_supabase ;;
        7) echo -e "${GREEN}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}" ; exit 0 ;;
        *) echo -e "${RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}" ;;
    esac
    
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    show_menu
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
show_menu 